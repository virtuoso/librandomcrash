# override function calls list
#
# Copyright (C) 2010 Alexander Shishkin
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
# This script generates symbols.{c,h} from symbols.list

-- include <sys/types.h>
-- include <stdint.h>
-- include <stdbool.h>
-- include <stdlib.h>

int access
	const char * pathname
	int mode
-- CRASH_COND(INVALID_PTR(pathname))

int brk
	void * addr

void * sbrk
	intptr_t increment

size_t strlen
	const char * s
-- CRASH_COND(INVALID_PTR(s))

char * strcpy
	char * dest
	const char * src
-- CRASH_COND(INVALID_PTR(dest))
-- CRASH_COND(INVALID_PTR(src))

int strcmp
	const char * s1
	const char * s2
-- CRASH_COND(INVALID_PTR(s1))
-- CRASH_COND(INVALID_PTR(s2))

int strncmp
	const char * s1
	const char * s2
	size_t n
-- CRASH_COND(INVALID_PTR(s1))
-- CRASH_COND(INVALID_PTR(s2))


char * strchrnul
	const char * s
	int c
-- CRASH_COND(INVALID_PTR(s))


char * getenv
	const char * name
-- CRASH_COND(INVALID_PTR(name))

-- include <stdarg.h>

int open
	const char * file
	int oflag
	...
-- CRASH_COND(INVALID_PTR(file))

int close
	int fd

ssize_t read
	int fd
	void * buf
	size_t count
-- CRASH_COND(INVALID_PTR(buf))

ssize_t write
	int fd
	const void * buf
	size_t count
-- CRASH_COND(INVALID_PTR(buf))

-- include <dirent.h>

struct dirent * readdir
@@ __nonnull ((1))
	DIR * __dirp
-- CRASH_COND(INVALID_PTR(__dirp))

DIR * opendir
	const char * name
-- CRASH_COND(INVALID_PTR(name))

pid_t getpid

void * memset
	void * s
	int c
	size_t n
-- CRASH_COND(INVALID_PTR(s))

void * memcpy
	void * dest
	const void * src
	size_t n
-- CRASH_COND(INVALID_PTR(dest))
-- CRASH_COND(INVALID_PTR(src))

int sigemptyset
	sigset_t * set
-- CRASH_COND(INVALID_PTR(set))

int sigfillset
	sigset_t * set
-- CRASH_COND(INVALID_PTR(set))

pid_t fork

void _exit
	int status

void _Exit
	int status

void exit
	int status

void abort

unsigned int sleep
	unsigned int seconds

